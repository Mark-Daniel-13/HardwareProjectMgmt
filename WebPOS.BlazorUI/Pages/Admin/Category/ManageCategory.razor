@page "/Admin/Category/Manage/"
@page "/Admin/Category/Manage/{categoryId:int}"
@inject NavigationManager navManager;
@inject Blazored.SessionStorage.ISessionStorageService session
@using WebPOS.BlazorUI.Shared.Components.Notification
<MudGrid>
    <MudItem xs="12">
        <MudPaper Elevation="6" Style="padding:2em; width:50%; margin:auto;">
            <MudText Typo="Typo.h6" Style="margin-bottom:1em"> @if (categoryId == 0){<span>Add</span> }else{<span>Update</span>} Category:</MudText>
            <MudForm @ref="formModel" @bind-IsValid="formIsvalid" @bind-Errors="formErrors">
                <MudTextField T="string" Label="Name" Required="true" @bind-Value="@categoryModel.Name" @onkeyup="EnterKeyPress" RequiredError="Category name is required!" />
                <MudTextField T="string" Label="Description" @onkeyup="EnterKeyPress" @bind-Value="@categoryModel.Description" />
            </MudForm>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ExecuteForm" Class="mt-4" Style="width:100%">Save</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
@if (notif?.ResultMsg != null)
{
    <StandardTextNotif Result="notif" />
}
@code {
        [Parameter]
        public int categoryId { get; set; }

    public ViewModel.CategoryManageModel categoryModel = new();
    private Business.Helpers.ResultHandler notif = new();
    MudForm formModel;
    bool formIsvalid;
    string[] formErrors = { };

    protected async override Task OnInitializedAsync()
    {
        if (categoryId != 0)
        {
            using (var categoryDbAccess = new Business.Product.Facades.Category())
            {
                var _categoryModel = await categoryDbAccess.GetById(categoryId);
                if (_categoryModel == null)
                {
                    await session.SetItemAsync(Business.Globals.SessionNotifName, new Business.Helpers.ResultHandler() { ResultMsg = "Category not found on database, please contact your administrator.", Result = false });
                    navManager.NavigateTo("/Admin/Category");
                }
                else
                {
                    categoryModel = ViewModel.CategoryManageModel.ToModel(_categoryModel);
                }
            }
        }
    }

    private async Task EnterKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await ExecuteForm();
        }
    }
    private async Task ExecuteForm()
    {
        using (var categoryDbAccess = new Business.Product.Facades.Category())
        {
            await formModel.Validate();
            if (formIsvalid)
            {
                var model = ViewModel.CategoryManageModel.ToBusinessModel(categoryModel);
                Business.Helpers.ResultHandler result;
                result = categoryId != 0 ? await categoryDbAccess.UpdateCategory(model) : await categoryDbAccess.AddCategory(model);

                await session.SetItemAsync(Business.Globals.SessionNotifName, new Business.Helpers.ResultHandler() { ResultMsg = result.ResultMsg, Result = result.Result });
                navManager.NavigateTo("/Admin/Category");
            }
        }
    }
}
