@page "/Admin/Category"

@using WebPOS.BlazorUI.Shared.Components.Modals
@inject Blazored.SessionStorage.ISessionStorageService session
@inject NavigationManager navManager;
<div class="container">
    @if (notif?.ResultMsg!=null)
    {
        <div class="row">
            <div class="error-notif ">
                <em>@notif.ResultMsg</em>
            </div>
        </div>
    }
    @if (showConfirmModal)
    {
        <div class="row">
            <ConfirmModal ConfirmationResult="getConfirmModalResult" DataName="category"></ConfirmModal>
        </div>
    }
    <div class="row m-2">
        <button class="btn btn-primary" @onclick="()=>AddClick()">Add Category</button>
    </div>
    <div class="row">
        <div class="c-table">
            <div class="c-table-header">
                <div class="c-table-search">
                    <span class="oi oi-magnifying-glass" />
                    <input type="text" name="search" @onchange="SearchItem" />
                </div>
            </div>
            <div class="c-table-body text-center">
                <table>
                    <thead>
                        <tr>
                            <th>
                                Category Id
                            </th>
                            <th>
                                Name
                            </th>
                            <th>
                                Description
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (pageList != null)
                        {
                            foreach (var category in pageList)
                            {
                                <tr class="@IsActive(category.CategoryId)" @onclick="()=>RowClick(category.CategoryId)">
                                    <td>
                                        @category.CategoryId
                                    </td>
                                    <td>
                                        @category.Name
                                    </td>
                                    <td>
                                        @category.Description
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3">
                                    No Records Found.
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (pageList != null)
                {
                    <div>
                        <div class="row">
                            <em>Selected @pageList.Count() items out of @filteredList.Count() items.</em>
                        </div>
                        @if (totalPage > 1)
                        {
                            <div class="row">
                                @for (var pageIndex = 0; pageIndex < totalPage; pageIndex++)
                                {
                                    var btnCount = pageIndex + 1;
                                    <button class="btn btn-primary" @onclick="()=>PageBtnClick(btnCount)">@btnCount</button>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    @if (selectedCategory != null)
    {
        <div class="row">
            <div class="data-controller">
                <button class="btn btn-primary" @onclick="()=>UpdateClick()">Update</button>
                <button type="button" class="btn btn-danger" @onclick="()=> { showConfirmModal = true; }">Delete</button>
            </div>
        </div>
    }
</div>

@code {
    private List<ViewModel.CategoryViewModel> categoryList;
    private int? selectedCategory;
    private bool skipRenderOnce = false;
    private Business.Helpers.ResultHandler notif = new();

    private int currentPage = 1;
    private int totalPage = 0;
    private int rowPageCount = 5;
    private List<ViewModel.CategoryViewModel> filteredList;
    private List<ViewModel.CategoryViewModel> pageList;

    protected override bool ShouldRender()
    {
        if (skipRenderOnce)
        {
            skipRenderOnce = false;
            return false;
        }
        return true;
    }
    protected override async Task OnInitializedAsync()
    {
        using (var categoryDbAccess = new Business.Product.Facades.Category())
        {
            categoryList = ViewModel.CategoryViewModel.ToModelList(await categoryDbAccess.GetAll());
        }

        if (categoryList != null)
        {
            filteredList = categoryList;
            RefreshTablePage();
        }
        notif = await session.GetItemAsync<Business.Helpers.ResultHandler>(Business.Globals.SessionNotifName);
        await session.ClearAsync();
    }

    private void PageBtnClick(int newPage)
    {
        if (currentPage != newPage)
        {
            currentPage = newPage;
            RefreshTablePage();
        }
        else
        {
            skipRenderOnce = true;
        }
    }
    private void RefreshTablePage()
    {
        if (filteredList.Count() > 0)
        {
            var _totalPage = (decimal)filteredList.Count() / (decimal)rowPageCount;
            totalPage = Convert.ToInt32(Math.Ceiling(_totalPage));

            var firstItemPageIndex = currentPage > 1 ? (currentPage - 1) * rowPageCount : 0;
            var retrieveItemCount = (currentPage != totalPage) ? rowPageCount : (filteredList.Count() - ((currentPage - 1) * rowPageCount));
            pageList = filteredList.GetRange(firstItemPageIndex, retrieveItemCount).ToList();
        }
        else
        {
            pageList = null;
        }
    }
    private void RowClick(int categoryId)
    {
        if (selectedCategory == categoryId) { showConfirmModal = false; }
        selectedCategory = (selectedCategory != categoryId) ? categoryId : null;
    }
    private string IsActive(int categoryId)
    {
        return (selectedCategory != null && categoryId == selectedCategory) ? "row-active" : "row-not-active";
    }

    private void UpdateClick()
    {
        string url = string.Format("/Admin/Category/Manage/{0}", selectedCategory);
        navManager.NavigateTo(url);
    }
    private void AddClick()
    {
        navManager.NavigateTo("/Admin/Category/Manage/");
    }
    private async void DeleteClick()
    {
        using (var categoryDbAccess = new Business.Product.Facades.Category())
        {
            var _categoryId = Convert.ToInt32(selectedCategory);
            var result = await categoryDbAccess.RemoveCategory(_categoryId);
            if (result.Result)
            {
                categoryList = categoryList.Where(c => c.CategoryId != _categoryId).ToList();
                filteredList = categoryList;
                RefreshTablePage();
                selectedCategory = null;
            }

            notif = new Business.Helpers.ResultHandler()
            {
                ResultMsg = result.ResultMsg,
                Result = result.Result,
            };
        }
    }
    private void SearchItem(ChangeEventArgs args)
    {
        var searchKey = args.Value.ToString();
        if (string.IsNullOrEmpty(searchKey))
        {
            filteredList = categoryList;
            RefreshTablePage();
            return;
        }
        filteredList = categoryList.Where(c => c.Name.Contains(searchKey)).ToList();
        RefreshTablePage();

    }

    private bool showConfirmModal = false;
    private void getConfirmModalResult(bool _result) {
        if (_result)
        {
            DeleteClick();
        }
        showConfirmModal = false;
    }
}
