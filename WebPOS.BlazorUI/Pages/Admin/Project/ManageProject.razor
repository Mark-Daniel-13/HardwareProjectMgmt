@page "/Admin/Project/Manage/"
@page "/Admin/Project/Manage/{dataId:int}"
@inject NavigationManager navManager;
@inject Blazored.SessionStorage.ISessionStorageService session
@using WebPOS.BlazorUI.Shared.Components.Notification
<MudGrid>
    <MudItem  xs="12">
        @if (!showUpdate)
        {
            <MudItem xs="3">
                <MudPaper style="display:flex;flex-direction:column;">
                    <MudText Typo="Typo.caption" Style="padding:.5em">Name: @dataModel.Name</MudText>
                    <MudText Typo="Typo.caption" Style="padding:.5em">Address: @dataModel.Address</MudText>
                    <MudText Typo="Typo.caption" Style="padding:.5em">Status: @((Business.Enums.ProjectStatus)dataModel.StatusId)</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=>{ showUpdate = true; }">Update</MudButton>
                </MudPaper>
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudPaper Elevation="6" Style="padding:2em; width:50%; margin:auto;">
                    <MudText Typo="Typo.h6" Style="margin-bottom:1em"> @if (dataId == 0) {<span>Add</span> } else {<span>Update</span >} Project:</MudText>
                    <MudForm @ref="formModel" @bind-IsValid="formIsvalid" @bind-Errors="formErrors">
                        <MudTextField T="string" Label="Project Name" Required="true" @bind-Value="@dataModel.Name" @onkeyup="EnterKeyPress" RequiredError="Project name is required!" />
                        <MudTextField T="string" Label="Address" @onkeyup="EnterKeyPress" @bind-Value="@dataModel.Address"/>
                        <MudSelect T="int" Label="Role" Strict="true" Variant="Variant.Outlined" MultiSelection="false" SelectedValues="selectValue" SelectedValuesChanged="SelectChange">
                            @foreach (var status in Enum.GetValues(typeof(Business.Enums.ProjectStatus)))
                            {
                                <MudSelectItem T="int" Value="@Convert.ToInt32(status)">@status</MudSelectItem>
                            }
                        </MudSelect>
                    </MudForm>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ExecuteForm" Class="mt-4" Style="width:100%">Save</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=> { showUpdate = false; }" Class="mt-4" Style="width:100%">Cancel</MudButton>
                </MudPaper>
            </MudItem>
        }
    </MudItem>
    @if (dataId != 0 && !showUpdate)
    {
        <MudItem xs="12">
            <MudPaper Elevation="6" Style="padding:3em">
                <WebPOS.BlazorUI.Shared.Components.RequiredItems.RequiredItems ProjectId="dataId" />
            </MudPaper>
        </MudItem>
    }
</MudGrid>
@if (notif?.ResultMsg != null)
{
    <StandardTextNotif Result="notif" />
}
@code {
    [Parameter]
    public int dataId { get; set; }

    public ViewModel.ProjectManageModel dataModel = new();
    private Business.Helpers.ResultHandler notif = new();
    private bool showUpdate = true;

    MudForm formModel;
    bool formIsvalid;
    string[] formErrors = { };
    HashSet<int> selectValue = new();
    private void SelectChange(HashSet<int> val)
    {
        selectValue = val;
        dataModel.StatusId = (int)selectValue?.FirstOrDefault();
    }

    protected async override Task OnInitializedAsync()
    {
        if (dataId != 0)
        {
            using (var DbAccess = new Business.Project.Facades.Projects())
            {

                var _dataModel = await DbAccess.GetById(dataId);
                if (_dataModel == null)
                {
                    await session.SetItemAsync(Business.Globals.SessionNotifName, new Business.Helpers.ResultHandler() { ResultMsg = "Project not found on database, please contact your administrator.", Result = false });
                    navManager.NavigateTo("/Admin/Project");
                }
                else
                {
                    showUpdate = false;
                    dataModel = ViewModel.ProjectManageModel.ToModel(_dataModel);
                    selectValue.Add(dataModel.StatusId);
                }
            }
        }
    }
    private async Task ExecuteForm()
    {
        await formModel.Validate();
        if (formIsvalid)
        {
            using (var DbAccess = new Business.Project.Facades.Projects())
            {
                var model = ViewModel.ProjectManageModel.ToBusinessModel(dataModel);
                Business.Helpers.ResultHandler result;
                result = dataId != 0 ? await DbAccess.Update(model) : await DbAccess.Add(model);

                notif = result;
                showUpdate = (result.Result) ? false : true;
            }
        }
    }
    private bool SelectStatus(int statusId)
    {
        if (statusId == dataModel.StatusId) return true;
        return false;
    }
    private async Task EnterKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await ExecuteForm();
        }
    }
}
