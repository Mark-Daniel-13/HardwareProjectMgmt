@page "/Admin/User/Manage/"
@page "/Admin/User/Manage/{dataId:int}"
@inject NavigationManager navManager;
@inject Blazored.SessionStorage.ISessionStorageService session
@using WebPOS.BlazorUI.Shared.Components.Notification
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
<MudGrid Style="display:flex;justify-content:center;">
    <MudItem xs="12">
        <MudPaper Elevation="6" Style="padding:2em; width:50%; margin:auto;">
            <MudText Typo="Typo.h6" Style="margin-bottom:1em"> @if (dataId == 0) {<span>Add</span> } else {<span>Update</span >} User:</MudText>
            <MudForm @ref="formModel" @bind-IsValid="formIsvalid" @bind-Errors="formErrors">
                <MudTextField T="string" Label="First Name" Required="true" @bind-Value="@dataModel.FirstName" @onkeyup="EnterKeyPress" RequiredError="First name is required!" />
                <MudTextField T="string" Label="Last Name" @onkeyup="EnterKeyPress" @bind-Value="@dataModel.LastName" Required="true" RequiredError="Last name is required!" />
                <MudTextField T="string" Label="Username" @onkeyup="EnterKeyPress" @bind-Value="@dataModel.Username" Required="true" RequiredError="Username is required!" />
                <MudTextField T="string" Label="Email" @onkeyup="EnterKeyPress" @bind-Value="@dataModel.Email" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" @onkeyup="EnterKeyPress" InputType="InputType.Password" @bind-Value="@dataModel.Password"
                                Required="@isPasswordReq" RequiredError="Password is required!" @ref="pw" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" />
                <MudTextField T="string" Label="Confirm Password" @onkeyup="EnterKeyPress" @bind-Value="dataModel.ConfirmPassword" InputType="InputType.Password" Validation="@(new Func<string,string>(PasswordMatch))" />
                <MudSelect T="int" Label="Role" Strict="true" Variant="Variant.Outlined" MultiSelection="false" SelectedValues="selectedRole" SelectedValuesChanged="RoleChange">
                    @foreach (var role in Enum.GetValues(typeof(Enums.Userrole)))
                    {
                        <MudSelectItem T="int" Value="@Convert.ToInt32(role)">@role</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ExecuteForm" Class="mt-4" Style="width:100%">Save</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
@if (notif?.ResultMsg != null)
{
    <StandardTextNotif Result="notif" />
}
@code {
    [Parameter]
    public int dataId { get; set; }
    HashSet<int> selectedRole = new();
    MudForm formModel;
    bool formIsvalid;
    string[] formErrors = { };
    MudTextField<string> pw;
    bool isPasswordReq;
    public ViewModel.UserManageModel dataModel = new();
    private Business.Helpers.ResultHandler notif = new();

    private void RoleChange(HashSet<int> val) {
        selectedRole = val;
        dataModel.UserRole = (int)selectedRole?.FirstOrDefault();
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
    private string PasswordMatch(string arg)
    {
        if (pw.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task EnterKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await ExecuteForm();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        isPasswordReq = (dataId == 0) ? true : false;
        if (dataId != 0)
        {
            using (var DbAccess = new Business.Users.Facades.User())
            {

                var _dataModel = await DbAccess.GetByIdWithRoles(dataId);
                if (_dataModel == null)
                {
                    await session.SetItemAsync(Business.Globals.SessionNotifName, new Business.Helpers.ResultHandler() { ResultMsg = "User not found on database, please contact your administrator.", Result = false });
                    navManager.NavigateTo("/Admin/User");
                }
                else
                {
                    dataModel = ViewModel.UserManageModel.ToModel(_dataModel);
                    selectedRole.Add(dataModel.UserRole);
                }
            }
        }
    }
    private async Task ExecuteForm()
    {
        await formModel.Validate();
        if (formIsvalid)
        {
            using (var DbAccess = new Business.Users.Facades.User())
            {
                var model = ViewModel.UserManageModel.ToBusinessModel(dataModel);
                Business.Helpers.ResultHandler result;
                result = dataId != 0 ? await DbAccess.UpdateUser(model) : await DbAccess.AddUser(model);

                await session.SetItemAsync(Business.Globals.SessionNotifName, new Business.Helpers.ResultHandler() { ResultMsg = result.ResultMsg, Result = result.Result });
                navManager.NavigateTo("/Admin/User");
            }
            
        }
    }
}
