@page "/Admin/Product/Manage/"
@page "/Admin/Product/Manage/{productId:int}"
@inject NavigationManager navManager;
@inject Blazored.SessionStorage.ISessionStorageService session
@using System.IO;
<MudGrid>
    <MudItem xs="12">
        <MudPaper Elevation="6" Style="padding:2em; width:50%; margin:auto;">
            <MudText Typo="Typo.h6" Style="margin-bottom:1em"> @if (productId == 0)
            {<span>Add</span> }else{<span>Update</span>} Product:</MudText>
            <MudForm @ref="formModel" @bind-IsValid="formIsvalid" @bind-Errors="formErrors">
                <MudTextField T="string" Label="Name" Required="true" @bind-Value="@productModel.Name" @onkeyup="EnterKeyPress" RequiredError="Product name is required!" />
                <WebPOS.BlazorUI.Shared.Components.SelectInputSearch.SelectInputSearch itemList="selectModel" SelectItemChange="SelectItemChange"  defaultValue="@productModel.CategoryId"/>
            </MudForm>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ExecuteForm" Class="mt-4" Style="width:100%">Save</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
@if (notif?.ResultMsg != null)
{
    <StandardTextNotif Result="notif" />
}
@code {
    [Parameter]
    public int productId { get; set; }

    public ViewModel.ProductManageModel productModel = new();
    private Business.Helpers.ResultHandler notif = new();

    MudForm formModel;
    bool formIsvalid;
    string[] formErrors = { };


    protected async override Task OnInitializedAsync()
    {
        if (productId != 0)
        {
            using (var DbAccess = new Business.Product.Facades.Product())
            {
                var _Model = await DbAccess.GetById(productId);
                if (_Model == null)
                {
                    await session.SetItemAsync(Business.Globals.SessionNotifName, new Business.Helpers.ResultHandler() { ResultMsg = "Product not found on database, please contact your administrator.", Result = false });
                    navManager.NavigateTo("/Admin/Product");
                }
                else
                {
                    productModel = ViewModel.ProductManageModel.ToModel(_Model);
                }
            }
        }
        using (var DbAccessCategory = new Business.Product.Facades.Category())
        {
            var _CModel = await DbAccessCategory.GetAll();
            selectModel = _CModel != null ? _CModel.Select(i => new Shared.Components.SelectInputSearch.SelectModel() { ItemValue = i.CategoryId, ItemText = i.Name }).ToList() : null;
        }
    }

    private async Task ExecuteForm()
    {
        await formModel.Validate();
        if (formIsvalid)
        {
            if (!checkCategory())
            {
                notif = new Business.Helpers.ResultHandler() { ResultMsg = "Please enter valid category", Result = false };
            }
            else
            {
                using (var DbAccess = new Business.Product.Facades.Product())
                {
                    var model = ViewModel.ProductManageModel.ToBusinessModel(productModel);
                    Business.Helpers.ResultHandler result;
                    result = productId != 0 ? await DbAccess.UpdateProduct(model) : await DbAccess.AddProduct(model);

                    await session.SetItemAsync(Business.Globals.SessionNotifName, new Business.Helpers.ResultHandler() { ResultMsg = result.ResultMsg, Result = result.Result });
                    navManager.NavigateTo("/Admin/Product");
                }
            }
        }
    }
    private bool checkCategory()
    {
        if (productModel.CategoryId == 0) return false;
        return true;
    }
    private bool SelectCategory(int categoryId)
    {
        if (categoryId == productModel.CategoryId) return true;
        return false;
    }
    private async Task EnterKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await ExecuteForm();
        }
    }
    private List<Shared.Components.SelectInputSearch.SelectModel> selectModel;
    private void SelectItemChange(int invId)
    {
        productModel.CategoryId = invId;
    }
}
