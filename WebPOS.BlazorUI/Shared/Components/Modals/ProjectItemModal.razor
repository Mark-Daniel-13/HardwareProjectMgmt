<MudGrid>
    <MudItem xs="12">
        <MudPaper Elevation="6" Style="padding:2em; width:50%; margin:auto;">
            <MudForm @ref="formModel" @bind-IsValid="formIsvalid" @bind-Errors="formErrors">
                @if (ProjectItemsId == 0)
                {
                    <WebPOS.BlazorUI.Shared.Components.SelectInputSearch.SelectInputSearch itemList="selectModel" SelectItemChange="SelectItemChange" />
                }
                else
                {
                    <MudTextField T="string" Label="Item Name" Required="true" @bind-Value="@ItemInputText" ReadOnly="true" RequiredError="Item is missing!" />
                }
                <MudTextField T="double" Label="Required Qty" Required="true" @bind-Value="@dataModel.RequiredQty" @onkeyup="EnterKeyPress" RequiredError="Required Qty is missing!" />
            </MudForm>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ExecuteForm" Class="mt-4" Style="width:100%">Save</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SetResult(new Business.Helpers.ResultHandler() { Result = false })" Class="mt-4" Style="width:100%">Cancel</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public EventCallback<Business.Helpers.ResultHandler> ConfirmationResult { get; set; }
    [Parameter]
    public int ProjectId { get; set; }
    [Parameter]
    public int ProjectItemsId { get; set; }
    private ViewModel.InventoryViewModel invModel { get; set; }
    private Business.Helpers.ResultHandler result { get; set; }

    MudForm formModel;
    bool formIsvalid;
    string[] formErrors = { };

    private void SetResult(Business.Helpers.ResultHandler _result)
    {
        result = _result;
        ConfirmationResult.InvokeAsync(result);
    }

    public ViewModel.ProjectItemManageModel dataModel = new();
    private string ItemInputText { get; set; }
    private List<Shared.Components.SelectInputSearch.SelectModel> selectModel;
    protected async override Task OnInitializedAsync()
    {
        dataModel.ProjectId = ProjectId;
        if (ProjectItemsId != 0)
        {
            using (var DbAccess = new Business.Project.Facades.ProjectItems())
            {
                var itemModel = await DbAccess.GetById(ProjectItemsId, true);
                dataModel.ItemId = itemModel.ItemId;
                dataModel.ProjectItemId = ProjectItemsId;
                dataModel.RequiredQty = itemModel.RequiredQty;
                ItemInputText = itemModel.Item.Description;
            }
        }
        else
        {
            using (var DbAccess = new Business.Product.Facades.Inventory())
            {
                var inv = await DbAccess.GetAll();
                selectModel = inv != null ? inv.Select(i => new Shared.Components.SelectInputSearch.SelectModel() { ItemValue = i.InventoryId, ItemText = i.Description }).ToList() : null;
            }
        }
    }
    private void SelectItemChange(int invId)
    {
        dataModel.ItemId = invId;
    }
    private async Task ExecuteForm()
    {
        await formModel.Validate();
        if (formIsvalid)
        {
            using (var DbAccess = new Business.Project.Facades.ProjectItems())
            {
                var model = ViewModel.ProjectItemManageModel.ToBusinessModel(dataModel);
                Business.Helpers.ResultHandler result;
                result = model.ProjectItemId == 0 ? await DbAccess.Add(model) : await DbAccess.Update(model);

                SetResult(result);
            }
        }
    }
    private async Task EnterKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await ExecuteForm();
        }
    }
}
